https://martinfowler.com/articles/microservices.html

- Componentização via serviços: 
    Componente é uma unidade do software independente, substituível 
    e também upgradable sem mexer no restante.
    - Um componente biblioteca é um programa in-memory.
    - Um serviço é out of proccess
    - Auto deployment

- Organização através das áreas de negócio:
    Microsserviços são organizados por áreas de negócio da organização

- Produtos e não projetos
    Tratar o software como produto. O time que desenvolveu, mantém 
    o Software development lifecycle, ou seja: Full Cycle.

- Smart endpoints e dumb pipes
    A aplicação deve ter endpoints que realizarão as operações das regras
    nos microsserviços.
    - Canais de comunicação são feitas através dos pipes.
    - As mensagens/ payloads não devem se modificar.

- Governança descentralizada
    Padronizar as coisas não é necessariamente a melhor forma.
    - Nem todo problema é um prego.
    - Nem toda solução é um martelo.
    - Os Sistemas devem ter crontratos para comunicação
    - Consumer driven contracts

- Gerenciamento de dados descentralizado
    Para deixarmos microsserviços autônomos os dados que eles acessam
    devem ser somente deles. 
    - Dados duplicados não significa que TODOS os dados serão.

- Automação de infraestrutura

- Desenhado para falhar
    Desde o dia zero do sistema é preciso pensar em resiliência
    - Circuit breaker

- Design evolutivo
    Se para um microsserviços funcionar você deve muda routros microsserviços
    provavelmente deveriam ser mergeados.
    - Dependências de microsserviços são monolitos distribuídos.

